// <auto-generated />
using System;
using BlogCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogCore.AccesoDatos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508214002_Migracion")]
    partial class Migracion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogCore.Models.Articulo", b =>
                {
                    b.Property<int>("articulo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("articulo_id"));

                    b.Property<int?>("Categoriacategoria_id")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("articulo_categoriaId");

                    b.Property<string>("articulo_descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("articulo_fechaCreacion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("articulo_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("articulo_rutaImagen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("articulo_id");

                    b.HasIndex("Categoriacategoria_id");

                    b.ToTable("Articulo");
                });

            modelBuilder.Entity("BlogCore.Models.Categoria", b =>
                {
                    b.Property<int>("categoria_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoria_id"));

                    b.Property<string>("categoria_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("categoria_orden")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("categoria_id");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("BlogCore.Models.CategoriaProducto", b =>
                {
                    b.Property<int>("categoriaProducto_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoriaProducto_id"));

                    b.Property<DateTime>("categoriaProducto_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("categoriaProducto_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("categoriaProducto_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoriaProducto_id");

                    b.ToTable("CategoriaProducto");
                });

            modelBuilder.Entity("BlogCore.Models.ComentarioArticulo", b =>
                {
                    b.Property<int>("comentarioArticulo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comentarioArticulo_id"));

                    b.Property<int>("Articuloarticulo_id")
                        .HasColumnType("int")
                        .HasColumnName("comentarioArticulo_articuloId");

                    b.Property<int?>("ComentarioArticulocomentarioArticulo_id")
                        .HasColumnType("int")
                        .HasColumnName("comentarioArticulo_CmtArticulofkID");

                    b.Property<string>("comentarioArticulo_descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("comentarioArticulo_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("comentarioArticulo_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("comentarioArticulo_guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comentarioArticulo_nombrePublicador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("comentarioArticulo_id");

                    b.HasIndex("Articuloarticulo_id");

                    b.HasIndex("ComentarioArticulocomentarioArticulo_id");

                    b.ToTable("ComentarioArticulo");
                });

            modelBuilder.Entity("BlogCore.Models.Etiqueta", b =>
                {
                    b.Property<int>("etiqueta_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("etiqueta_id"));

                    b.Property<string>("etiqueta_color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("etiqueta_disponiblidad")
                        .HasColumnType("bit");

                    b.Property<DateTime>("etiqueta_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("etiqueta_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("etiqueta_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("etiqueta_id");

                    b.ToTable("Etiqueta");
                });

            modelBuilder.Entity("BlogCore.Models.EtiquetaArticulo", b =>
                {
                    b.Property<int>("Articuloarticulo_id")
                        .HasColumnType("int")
                        .HasColumnName("EtiquetaArticulo_articuloId");

                    b.Property<int>("Etiquetaetiqueta_id")
                        .HasColumnType("int")
                        .HasColumnName("EtiquetaArticulo_etiquetaId");

                    b.HasIndex("Articuloarticulo_id");

                    b.HasIndex("Etiquetaetiqueta_id");

                    b.ToTable("EtiquetaArticulo");
                });

            modelBuilder.Entity("BlogCore.Models.ImagenesProducto", b =>
                {
                    b.Property<int>("imagenesProducto_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("imagenesProducto_id"));

                    b.Property<int>("Productoproducto_id")
                        .HasColumnType("int")
                        .HasColumnName("imagenesProducto_ProductoId");

                    b.Property<bool>("imagenesProducto_estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("imagenesProducto_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("imagenesProducto_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("imagenesProducto_ruta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("imagenesProducto_id");

                    b.HasIndex("Productoproducto_id");

                    b.ToTable("ImagenesProducto");
                });

            modelBuilder.Entity("BlogCore.Models.OpinionesProducto", b =>
                {
                    b.Property<int>("opinionesProducto_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("opinionesProducto_id"));

                    b.Property<int>("Productoproducto_id")
                        .HasColumnType("int")
                        .HasColumnName("opinionesProducto_productoId");

                    b.Property<string>("opinionesProducto_descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("opinionesProducto_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("opinionesProducto_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("opinionesProducto_puntuacion")
                        .HasColumnType("int");

                    b.Property<string>("opinionesProducto_recursoRuta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opinionesProducto_tema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("opinionesProducto_id");

                    b.HasIndex("Productoproducto_id");

                    b.ToTable("OpinionesProducto");
                });

            modelBuilder.Entity("BlogCore.Models.Producto", b =>
                {
                    b.Property<int>("producto_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("producto_id"));

                    b.Property<int>("CategoriaProductocategoriaProducto_id")
                        .HasColumnType("int")
                        .HasColumnName("producto_categoriaProductoId");

                    b.Property<bool?>("producto_Esdescuento")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("producto_descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("producto_descuento")
                        .HasColumnType("int");

                    b.Property<bool?>("producto_disponiblidad")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<DateTime>("producto_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("producto_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("producto_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("producto_precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("producto_stock")
                        .HasColumnType("int");

                    b.HasKey("producto_id");

                    b.HasIndex("CategoriaProductocategoriaProducto_id");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("BlogCore.Models.ReaccionArticulo", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int")
                        .HasColumnName("ReaccionComentario_aspNetUserId");

                    b.Property<int>("Articuloarticulo_id")
                        .HasColumnType("int")
                        .HasColumnName("ReaccionComentario_articuloId");

                    b.Property<string>("applicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("Articuloarticulo_id");

                    b.HasIndex("applicationUserId");

                    b.ToTable("ReaccionArticulo");
                });

            modelBuilder.Entity("BlogCore.Models.Slider", b =>
                {
                    b.Property<int>("slider_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("slider_id"));

                    b.Property<bool?>("slider_estado")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("slider_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slider_rutaImagen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("slider_id");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("BlogCore.Models.VideosProducto", b =>
                {
                    b.Property<int>("videosProducto_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("videosProducto_id"));

                    b.Property<int>("Productoproducto_id")
                        .HasColumnType("int")
                        .HasColumnName("videosProducto_ProductoId");

                    b.Property<bool>("videosProducto_estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("videosProducto_fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("videosProducto_fechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("videosProducto_ruta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("videosProducto_id");

                    b.HasIndex("Productoproducto_id");

                    b.ToTable("VideosProducto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlogCore.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("BlogCore.Models.Articulo", b =>
                {
                    b.HasOne("BlogCore.Models.Categoria", "categoria")
                        .WithMany("articulos")
                        .HasForeignKey("Categoriacategoria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("BlogCore.Models.ComentarioArticulo", b =>
                {
                    b.HasOne("BlogCore.Models.Articulo", "articulo")
                        .WithMany()
                        .HasForeignKey("Articuloarticulo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogCore.Models.ComentarioArticulo", "ComentarioArticulocomentarioArticuloFK")
                        .WithMany("listadoComentarioArticulos")
                        .HasForeignKey("ComentarioArticulocomentarioArticulo_id")
                        .HasConstraintName("FK__Comentari__comen__4AB81AF0");

                    b.Navigation("ComentarioArticulocomentarioArticuloFK");

                    b.Navigation("articulo");
                });

            modelBuilder.Entity("BlogCore.Models.EtiquetaArticulo", b =>
                {
                    b.HasOne("BlogCore.Models.Articulo", "articulo")
                        .WithMany()
                        .HasForeignKey("Articuloarticulo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogCore.Models.Etiqueta", "etiqueta")
                        .WithMany()
                        .HasForeignKey("Etiquetaetiqueta_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articulo");

                    b.Navigation("etiqueta");
                });

            modelBuilder.Entity("BlogCore.Models.ImagenesProducto", b =>
                {
                    b.HasOne("BlogCore.Models.Producto", "producto")
                        .WithMany("imagenesProducto")
                        .HasForeignKey("Productoproducto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("producto");
                });

            modelBuilder.Entity("BlogCore.Models.OpinionesProducto", b =>
                {
                    b.HasOne("BlogCore.Models.Producto", "producto")
                        .WithMany("opinionesProducto")
                        .HasForeignKey("Productoproducto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("producto");
                });

            modelBuilder.Entity("BlogCore.Models.Producto", b =>
                {
                    b.HasOne("BlogCore.Models.CategoriaProducto", "categoriaProducto")
                        .WithMany("productos")
                        .HasForeignKey("CategoriaProductocategoriaProducto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoriaProducto");
                });

            modelBuilder.Entity("BlogCore.Models.ReaccionArticulo", b =>
                {
                    b.HasOne("BlogCore.Models.Articulo", "articulo")
                        .WithMany()
                        .HasForeignKey("Articuloarticulo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogCore.Models.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId");

                    b.Navigation("applicationUser");

                    b.Navigation("articulo");
                });

            modelBuilder.Entity("BlogCore.Models.VideosProducto", b =>
                {
                    b.HasOne("BlogCore.Models.Producto", "producto")
                        .WithMany("videosProducto")
                        .HasForeignKey("Productoproducto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("producto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlogCore.Models.Categoria", b =>
                {
                    b.Navigation("articulos");
                });

            modelBuilder.Entity("BlogCore.Models.CategoriaProducto", b =>
                {
                    b.Navigation("productos");
                });

            modelBuilder.Entity("BlogCore.Models.ComentarioArticulo", b =>
                {
                    b.Navigation("listadoComentarioArticulos");
                });

            modelBuilder.Entity("BlogCore.Models.Producto", b =>
                {
                    b.Navigation("imagenesProducto");

                    b.Navigation("opinionesProducto");

                    b.Navigation("videosProducto");
                });
#pragma warning restore 612, 618
        }
    }
}
